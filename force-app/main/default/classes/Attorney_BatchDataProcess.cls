global class Attorney_BatchDataProcess implements Schedulable{
    global void execute(SchedulableContext sc) {
        ProcessData();
    }
    
    public static void ProcessData(){
        List<Batch_Data__c> BatchDataList = [Select Id,Name,IsDaily__c,Batch_Monitoring_Interval__c,Batch_Failure_Reason__c, Emails_To_Notify__c, Last_Execution_Time__c, Batch_Execution_Status__c from Batch_Data__c where isAsyncMethod__c = False];
        Map<Id, String> RecordEmailMap = new Map<Id, String>();
        Map<Id, Batch_Data__c> BatchDataMap = new Map<Id,Batch_Data__c>(BatchDataList);        
        for(Batch_Data__c bd: BatchDataList){
            DateTime now = System.now();
            System.debug(bd);
            if((bd.Last_Execution_Time__c== null || (!bd.IsDaily__c && ((bd.Batch_Monitoring_Interval__c != null && bd.Last_Execution_Time__c < now.addHours(0-Integer.valueOf(bd.Batch_Monitoring_Interval__c)) ) || (bd.Batch_Monitoring_Interval__c != null && bd.Last_Execution_Time__c < now.addHours(-4)))) || (bd.IsDaily__c && bd.Last_Execution_Time__c < now.addDays(-2))) && bd.Batch_Execution_Status__c != 'Failed'){
                bd.Batch_Execution_Status__c = 'Failed';
                if(bd.Last_Execution_Time__c != null)
                bd.Batch_Failure_Reason__c = 'This batch was last executed at '+bd.Last_Execution_Time__c;
                else
                    bd.Batch_Failure_Reason__c = 'This batch is never executed';    
                RecordEmailMap.put(bd.Id,bd.Emails_To_Notify__c);
                bd.Batch_Execution_Status__c = 'Notified';
            }
            
            if((bd.Last_Execution_Time__c== null || (!bd.IsDaily__c && ((bd.Batch_Monitoring_Interval__c != null && bd.Last_Execution_Time__c < now.addHours(0-Integer.valueOf(bd.Batch_Monitoring_Interval__c)) ) || (bd.Batch_Monitoring_Interval__c != null && bd.Last_Execution_Time__c < now.addHours(-4)))) || (bd.IsDaily__c && bd.Last_Execution_Time__c < now.addDays(-2))) && bd.Batch_Execution_Status__c == 'Failed' ){
                if(bd.Batch_Failure_Reason__c == null){
                    bd.Batch_Failure_Reason__c = 'The batch status for this batch shows that it was failed';
                }
                RecordEmailMap.put(bd.Id,bd.Emails_To_Notify__c);
                bd.Batch_Execution_Status__c = 'Notified';
            }
        }
        
        List<Messaging.SingleEmailMessage> EmailMessages = new List<Messaging.SingleEmailMessage>();
       // EmailTemplate et=[Select id from EmailTemplate where developername = 'Batch_Execution_Stopped' limit 1];
        for(Id BatchDataId: RecordEmailMap.keySet()){
            if(RecordEmailMap.get(BatchDataId) != null){
                List<String> ToAddresses = new List<String>();
                
                List<String> SplitList = RecordEmailMap.get(BatchDataId).split(',');
                for(String emailId: SplitList){
                    if(EmailId.contains(';')){
                        ToAddresses.addAll(emailId.split(';'));
                    }
                    else{
                        ToAddresses.add(EmailId);
                    }
                }
               /* Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                mail.setTemplateId(et.Id);
                mail.setSenderDisplayName('System Admin');
                mail.setToAddresses(ToAddresses);
                mail.setTargetObjectId(UserInfo.getUserId());
                mail.setSaveAsActivity(false);
                //mail.setWhatId(BatchDataId);
                EmailMessages.add(mail);*/
                
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                email.setSubject('Batch Execution for '+ BatchDataMap.get(BatchDataId).Name +' has stopped');
                email.setHtmlBody('Hello, <br/><br/>This is the test mail that you generated. <br/>The Email Id for which this mail was generated by <br/><br/>Regards<br/> Developer');
                email.setSaveAsActivity(false);
                email.setToAddresses(ToAddresses);
                EmailMessages.add(email);
            }
        }
        
        if(!EmailMessages.isEmpty()){
            Messaging.sendEmail(emailMessages);
        }
        Update BatchDataList;
    }
}